abstract class Syntax {
  static const String AssignmentExpression = 'AssignmentExpression';
  static const String AssignmentPattern = 'AssignmentPattern';
  static const String ArrayExpression = 'ArrayExpression';
  static const String ArrayPattern = 'ArrayPattern';
  static const String ArrowFunctionExpression = 'ArrowFunctionExpression';
  static const String BlockStatement = 'BlockStatement';
  static const String BinaryExpression = 'BinaryExpression';
  static const String BreakStatement = 'BreakStatement';
  static const String CallExpression = 'CallExpression';
  static const String CatchClause = 'CatchClause';
  static const String ClassBody = 'ClassBody';
  static const String ClassDeclaration = 'ClassDeclaration';
  static const String ClassExpression = 'ClassExpression';
  static const String ConditionalExpression = 'ConditionalExpression';
  static const String ContinueStatement = 'ContinueStatement';
  static const String DoWhileStatement = 'DoWhileStatement';
  static const String DebuggerStatement = 'DebuggerStatement';
  static const String EmptyStatement = 'EmptyStatement';
  static const String ExportAllDeclaration = 'ExportAllDeclaration';
  static const String ExportDefaultDeclaration = 'ExportDefaultDeclaration';
  static const String ExportNamedDeclaration = 'ExportNamedDeclaration';
  static const String ExportSpecifier = 'ExportSpecifier';
  static const String ExpressionStatement = 'ExpressionStatement';
  static const String ForStatement = 'ForStatement';
  static const String ForOfStatement = 'ForOfStatement';
  static const String ForInStatement = 'ForInStatement';
  static const String FunctionDeclaration = 'FunctionDeclaration';
  static const String FunctionExpression = 'FunctionExpression';
  static const String Identifier = 'Identifier';
  static const String IfStatement = 'IfStatement';
  static const String ImportDeclaration = 'ImportDeclaration';
  static const String ImportDefaultSpecifier = 'ImportDefaultSpecifier';
  static const String ImportNamespaceSpecifier = 'ImportNamespaceSpecifier';
  static const String ImportSpecifier = 'ImportSpecifier';
  static const String Literal = 'Literal';
  static const String LabeledStatement = 'LabeledStatement';
  static const String LogicalExpression = 'LogicalExpression';
  static const String MemberExpression = 'MemberExpression';
  static const String MetaProperty = 'MetaProperty';
  static const String MethodDefinition = 'MethodDefinition';
  static const String NewExpression = 'NewExpression';
  static const String ObjectExpression = 'ObjectExpression';
  static const String ObjectPattern = 'ObjectPattern';
  static const String Program = 'Program';
  static const String Property = 'Property';
  static const String RestElement = 'RestElement';
  static const String ReturnStatement = 'ReturnStatement';
  static const String SequenceExpression = 'SequenceExpression';
  static const String SpreadElement = 'SpreadElement';
  static const String Super = 'Super';
  static const String SwitchCase = 'SwitchCase';
  static const String SwitchStatement = 'SwitchStatement';
  static const String TaggedTemplateExpression = 'TaggedTemplateExpression';
  static const String TemplateElement = 'TemplateElement';
  static const String TemplateLiteral = 'TemplateLiteral';
  static const String ThisExpression = 'ThisExpression';
  static const String ThrowStatement = 'ThrowStatement';
  static const String TryStatement = 'TryStatement';
  static const String UnaryExpression = 'UnaryExpression';
  static const String UpdateExpression = 'UpdateExpression';
  static const String VariableDeclaration = 'VariableDeclaration';
  static const String VariableDeclarator = 'VariableDeclarator';
  static const String WhileStatement = 'WhileStatement';
  static const String WithStatement = 'WithStatement';
  static const String YieldExpression = 'YieldExpression';
}